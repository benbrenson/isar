# Copyright (C) 2003  Chris Larson
# Copyright (C) 2017 Mixed Mode GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

B = "${WORKDIR}/build"
CVSDIR = "${DL_DIR}/cvs"
RDEPENDS = ""
DEPENDS = ""
DL_DIR ?= "${TMPDIR}/downloads"
SSTATE_DIR ?= "${TMPDIR}/sstate-cache"
FILESDIR = "${@bb.which(bb.data.getVar('FILESPATH', d, 1), '.')}"
FILESPATH = "${FILE_DIRNAME}/${PF}:${FILE_DIRNAME}/${P}:${FILE_DIRNAME}/${PN}:${FILE_DIRNAME}/files:${FILE_DIRNAME}"
FILE_DIRNAME = "${@os.path.dirname(bb.data.getVar('FILE', d))}"
GITDIR = "${DL_DIR}/git"
IMAGE_CMD = "_NO_DEFINED_IMAGE_TYPES_"
IMAGE_ROOTFS = "${TMPDIR}/rootfs"
MKTEMPCMD = "mktemp -q ${TMPBASE}"
MKTEMPDIRCMD = "mktemp -d -q ${TMPBASE}"
PERSISTENT_DIR = "${TMPDIR}/cache"
RESUMECOMMAND = ""
RESUMECOMMAND_wget = "/usr/bin/env wget -c -t 5 --passive-ftp -P ${DL_DIR} ${URI}"
S = "${WORKDIR}/${P}"
SRC_URI = "file://${FILE}"
SRC_DIR ?= ""
STAMPS_DIR ?= "${TMPDIR}/stamps"
STAMP = "${TMPDIR}/stamps/${PF}"
SVNDIR = "${DL_DIR}/svn"
T = "${WORKDIR}/temp"
TARGET_ARCH = "${BUILD_ARCH}"
TMPDIR = "${TOPDIR}/tmp"
TOOLCHAINDIR = "${SYSROOT}/toolchain"
SYSROOT = "${TMPDIR}/sysroot/${MACHINE}"
TOOLSDIR_NATIVE = "${TMPDIR}/tools"
UPDATECOMMAND = ""
UPDATECOMMAND_cvs = "/usr/bin/env cvs -d${CVSROOT} update ${CVSCOOPTS}"
UPDATECOMMAND_svn = "/usr/bin/env svn update ${SVNCOOPTS}"
WORKDIR ?= "${TMPDIR}/work/${PF}"
PERSISTENT_DIR = "${TMPDIR}/cache"
EXTRACTDIR ?= "${WORKDIR}"
CACHE = "${TMPDIR}/cache"

DPKG_LOCK="${TMPDIR}/dpkg.lock"
BB_HASHCONFIG_WHITELIST ?= "${BB_HASHBASE_WHITELIST} DATE TIME SSH_AGENT_PID \
    SSH_AUTH_SOCK PSEUDO_BUILD BB_ENV_EXTRAWHITE DISABLE_SANITY_CHECKS \
    PARALLEL_MAKE BB_NUMBER_THREADS BB_ORIGENV BB_INVALIDCONF BBINCLUDED"

CLASSOVERRIDE ?= "class-dpkg"
OVERRIDES_TEMP = "local:${MACHINE}:${TARGET_ARCH}:${CLASSOVERRIDE}:${DISTRO_SUITE}:${DISTRO_ARCH}:${IMAGE_FEATURES}:${BOOT_DEVICE}"
OVERRIDES = "${@bb.utils.convertSpaces(d,'OVERRIDES_TEMP',':')}"

DEPLOY_DIR = "${TMPDIR}/deploy"
DEPLOY_DIR_DEB = "${TMPDIR}/deploy/deb/${MACHINE}"
DEPLOY_DIR_IMAGE = "${DEPLOY_DIR}/images/${MACHINE}"
DEPLOY_DIR_BIN = "${DEPLOY_DIR}/bin"
CHROOT_DEPLOY_DIR_DEB = "/opt/deb"

BUILDCHROOT_DIR ?= "${TMPDIR}/work/buildchroot/${DISTRO}"
CROSS_BUILDCHROOT_DIR ?= "${TMPDIR}/work/cross-buildchroot/${DISTRO}"
ROOTFS_DIR ?= "${TMPDIR}/rootfs/${MACHINE}"

P = "${PN}-${PV}"
PF = "${PN}-${PV}-${PR}"
PN = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[0] or 'defaultpkgname'}"
PR = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[2] or 'r0'}"
PROVIDES = ""
PROVIDES_prepend = "${PN} "
PV = "${@bb.parse.BBHandler.vars_from_file(bb.data.getVar('FILE',d),d)[1] or '1.0'}"

# Base package name
# Automatically derives "foo" from "foo-native", "foo-cross" or "foo-initial"
# otherwise it is the same as PN and P
SPECIAL_PKGSUFFIX = "-native -cross"
BPN = "${@bb.utils.prune_suffix(d.getVar('PN', True), d.getVar('SPECIAL_PKGSUFFIX', True).split(), d)}"
BP = "${BPN}-${PV}"

# Timestamp variables
DATE := "${@time.strftime('%Y%m%d',time.gmtime())}"
TIME := "${@time.strftime('%H%M%S',time.gmtime())}"
DATETIME = "${DATE}${TIME}"


# Setup our default hash policy
BB_SIGNATURE_HANDLER ?= "noop"

PARALLEL_MAKE ?= "2"

include conf/local.conf
include conf/machine/${MACHINE}.conf
include conf/distro/${DISTRO}.conf

# Export env to bitbake
export PYTHONPATH
export PATH
export BUILDDIR
export LC_ALL="C.UTF-8"
export https_proxy
export http_proxy
export no_proxy


SUDO ?= "sudo -s -E PYTHONPATH=$PYTHONPATH PATH=$PATH"

# Path definitions inside chroot
PP     ?= "/home/builder/${PN}"
PPS    ?= "${PP}/${SRC_DIR}"
PPB    ?= "${PP}/${BUILD_DIR}"

# We use schroot, so we need configs with schroot ids
CHROOT ?= "schroot -v -p -c ${SCHROOT_ID} -d / -u root"
BUILDCHROOT_ID ?= "isar-buildchroot"
CROSS_BUILDCHROOT_ID ?= "isar-cross-buildchroot"
ROOTFS_ID ?= "isar-rootfs"
SCHROOT_ID ?= "${BUILDCHROOT_ID}"

# Debian definitions
DEB_SIGN ?= "-us -uc"
DEB_COMPRESSION ?= "gzip"
DEB_HOST_ARCH ?= "amd64"
APT_EXTRA_OPTS ?= ""


# Path prefixes
base_prefix = ""
prefix = "/usr"
exec_prefix = "/usr"

# Base paths
base_bindir = "${base_prefix}/bin"
base_sbindir = "${base_prefix}/sbin"
base_libdir = "${base_prefix}/${baselib}"
base_devdir = "${base_prefix}/dev"
nonarch_base_libdir = "${base_prefix}/lib"

# Architecture independent paths
sysconfdir = "${base_prefix}/etc"
servicedir = "${base_prefix}/srv"
sharedstatedir = "${base_prefix}/com"
localstatedir = "${base_prefix}/var"
datadir = "${prefix}/share"
infodir = "${datadir}/info"
mandir = "${datadir}/man"
docdir = "${datadir}/doc"
systemd_unitdir = "${nonarch_base_libdir}/systemd"
systemd_system_unitdir = "${nonarch_base_libdir}/systemd/system"
nonarch_libdir = "${exec_prefix}/lib"
systemd_user_unitdir = "${nonarch_libdir}/systemd/user"

# Architecture dependent paths
bindir = "${exec_prefix}/bin"
sbindir = "${exec_prefix}/sbin"
libdir = "${exec_prefix}/${baselib}"
libexecdir = "${libdir}/${BPN}"
includedir = "${exec_prefix}/include"
